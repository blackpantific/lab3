kernel void sum(global const int* a, global const int*b, global int *c){

		uint i = get_global_id(0);

		printf("\ni = %i", i);
		c[i] = a[i] + b[i];
		printf("\na[%i] = %i  b[%i] = %i c[%i] = %i", i, a[i], i, b[i], i, c[i]);
}

kernel void matrix_global(global const float* a, global const float* b, global float *c, int widthA, int widthB){

		int global_x = get_global_id(0);//x координата
		int global_y = get_global_id(1);//y координата


		printf("\nvalue1 = %i", widthA);

		float value = 0.0;

		for(int i = 0; i < widthA; i++){
			
			value += a[global_y * widthA + i] * b[global_x + i * widthB];
		
		}

		c[global_x + global_y * widthB] = value;
		//printf("\nvalue = %f", value);

}

kernel void matrix_local(global const float* a, global const float* b, global float* c, int widthA, int widthB){

		int local_x = get_local_id(0);
		int local_y = get_local_id(1);

		int global_x = get_global_id(0);//x координата
		int global_y = get_global_id(1);//y координата


		local float locMatrA[LOCALWS][LOCALWS];//заменить 2 на ширину(она же высота) сабматрицы лок группы, т.е. A
		local float locMatrB[LOCALWS][LOCALWS];//заменить 2 на ширину(она же высота) сабматрицы лок группы, т.е. B
		local float locMatrC[LOCALWS][LOCALWS];


		for(int i = 0; i < NUM_OF_SUBMATRIX; i++){//2 в данном случае это количество сабплиток умещающихся по ширине всей глобал работы, т.е 4 надо реплейснуть потом на константу. количество сабплиток это ширина итоговой матрицы делить на ширину лок. группы


			locMatrA[local_y][local_x] = a[global_y * widthA + local_x + i*LOCALWS];//2 тоже поменять на ширину сабматрицы

			if(global_y + 1 <= LOCALWS){
			
				locMatrB[local_y][local_x] = b[global_x + LOCALWS * i * widthB + widthB * global_y];//2 поменять на кол-во строк сабматрицы
			}else{
			
				///summary: это смещение от 0 в пределах сабматрицы для того чтобы "прыгать" через определенное количество элементов
				//в других сабматрицах. Ищется только для матрицы B
				int shiftInY = (global_y + 1)/LOCALWS - 1;
				locMatrB[local_y][local_x] = b[global_x + LOCALWS * i * widthB + widthB * shiftInY];//2 поменять на кол-во строк сабматрицы
			}


			barrier(CLK_LOCAL_MEM_FENCE);

			float value = 0.0;


			for(int k = 0; k < LOCALWS; k++){
			
				value += locMatrA[local_y][k] * locMatrB[k][local_x];
	
			}


			barrier(CLK_LOCAL_MEM_FENCE);

			c[global_x + global_y * widthB] += value;

			//if((global_y == 0 || global_y == 1) && (global_x == 2 || global_x == 3)){
				
				//printf("\nlocMatrB[%i][%i] = %f, i=%i, global_x = %i, global_y = %i, %f",
				//local_y, 
				//local_x, 
				//locMatrB[local_y][local_x],
				//i,
				//global_x,
				//global_y,
				//b[global_x + 2 * i * widthB + widthB * global_y]);
				
			//}

			//if((global_y == 2 || global_y == 3) && (global_x == 2 || global_x == 3)){
			
				//printf("\nlocMatrA[%i][%i] = %f, i=%i, global_x = %i, global_y = %i, %f",
				//local_y, 
				//local_x, 
				//locMatrA[local_y][local_x],
				//i,
				//global_x,
				//global_y,
				//a[global_y * widthA + local_x + i*2]);
			//}

		}
}
