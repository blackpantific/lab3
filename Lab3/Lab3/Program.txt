kernel void sum(global const int* a, global const int*b, global int *c){

		uint i = get_global_id(0);

		printf("\ni = %i", i);
		c[i] = a[i] + b[i];
		printf("\na[%i] = %i  b[%i] = %i c[%i] = %i", i, a[i], i, b[i], i, c[i]);
}

kernel void matrix_global(global const float* a, global const float* b, global float *c, int widthA, int widthB){

		int global_x = get_global_id(0);//x координата
		int global_y = get_global_id(1);//y координата


		printf("\nvalue1 = %i", widthA);

		float value = 0.0;

		for(int i = 0; i < widthA; i++){
			
			value += a[global_y * widthA + i] * b[global_x + i * widthB];
		
		}

		c[global_x + global_y * widthB] = value;
		//printf("\nvalue = %f", value);

}

kernel void matrix_local(global const float* a, global const float* b, global float* c, int widthA, int widthB){

		int local_x = get_local_id(0);
		int local_y = get_local_id(1);

		int global_x = get_global_id(0);//x координата
		int global_y = get_global_id(1);//y координата


		local float locMatrA[2][2];//заменить 2 на ширину(она же высота) сабматрицы лок группы, т.е. A
		local float locMatrB[2][2];//заменить 2 на ширину(она же высота) сабматрицы лок группы, т.е. B

		//printf("\nlocal_x = %i, local_y = %i, global_x = %i, global_y = %i",
		//local_x,
		//local_y,
		//global_x,
		//global_y);

		for(int i = 0; i < 2; i++){//2 в данном случае это количество сабплиток умещающихся по ширине всей глобал работы, т.е 4 надо реплейснуть потом на константу. количество сабплиток это ширина итоговой матрицы делить на ширину лок. группы
		
			int reverseIterator = 2 - 1 - i;

			//locMatrA[local_y][local_x] = a[global_y * widthA + local_x + i*2];//2 тоже поменять на ширину сабматрицы

			int positionB = global_x + widthB * global_y - 2 * reverseIterator * widthB;
			if(positionB < 0){
				
				locMatrB[local_y][local_x] = b[global_x + widthB * global_y];
			}else{
			
				locMatrB[local_y][local_x] = b[global_x + widthB * global_y - 2 * reverseIterator * widthB];
			}


			if((global_y == 0 || global_y == 1) && (global_x == 0 || global_x == 1)){
				
				printf("\nlocMatrB[%i][%i] = %f, i=%i, global_x = %i, global_y = %i, %i",
				local_y, 
				local_x, 
				locMatrB[local_y][local_x],
				i,
				global_x,
				global_y, 
				global_x + widthB * global_y - 2 * reverseIterator * widthB);
				
			}

			
		}

}
